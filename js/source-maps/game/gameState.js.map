{"version":3,"sources":["game/gameState.js"],"names":["gameState","this","boardSize","filledCells","totalCells","board","prototype","setupBoard","Error","Math","pow","i","j","isValidMove","row","col","setMove","value","chkTie","chkWin","h","v","dl","dr","module","exports"],"mappings":"AAAA,YAEA,IAAIA,WAAY,WACdC,KAAKC,UAAY,EACjBD,KAAKE,YAAc,EACnBF,KAAKG,WAAa,EAClBH,KAAKI,SAGPL,WAAUM,UAAUC,WAAa,SAAUL,GACzC,GAAyB,gBAAdA,GAWT,KAAM,IAAIM,OAAM,yBAVhBP,MAAKC,UAAYA,EACjBD,KAAKG,WAAaK,KAAKC,IAAIT,KAAKC,UAAW,EAC3C,KAAK,GAAIS,GAAI,EAAGA,EAAIV,KAAKC,UAAWS,IAAK,CACvCV,KAAKI,MAAMM,KAEX,KAAK,GAAIC,GAAI,EAAGA,EAAIX,KAAKC,UAAWU,IAClCX,KAAKI,MAAMM,GAAGC,GAAK,OAQ3BZ,UAAUM,UAAUO,YAAc,SAAUC,EAAKC,GAC/C,MAA+B,mBAApBd,MAAKI,MAAMS,KAEqB,mBAAzBb,MAAKI,MAAMS,GAAKC,IAEE,OAAzBd,KAAKI,MAAMS,GAAKC,KAO7Bf,UAAUM,UAAUU,QAAU,SAAUF,EAAKC,EAAKE,GAC5ChB,KAAKY,YAAYC,EAAKC,KACxBd,KAAKI,MAAMS,GAAKC,GAAOE,EACvBhB,KAAKE,cACLF,KAAKiB,WAITlB,UAAUM,UAAUY,OAAS,WAC3B,GAAIjB,KAAKE,cAAgBF,KAAKG,WAC5B,OAAO,GAIXJ,UAAUM,UAAUa,OAAS,SAAUL,EAAKC,EAAKE,GAM/C,IAAK,GALDG,GAAI,EACJC,EAAI,EACJC,EAAK,EACLC,EAAK,EAEAZ,EAAI,EAAGA,EAAIV,KAAKC,UAAWS,IAG9BV,KAAKI,MAAMM,GAAGI,KAASE,GAAOI,IAG9BpB,KAAKI,MAAMS,GAAKH,KAAOM,GAAOG,IAG9BnB,KAAKI,MAAMM,GAAGV,KAAKC,UAAY,EAAIS,KAAOM,GAAOK,IAGjDrB,KAAKI,MAAMM,GAAGA,KAAOM,GAAOM,GAGlC,OAAOH,IAAKnB,KAAKC,WAAamB,GAAKpB,KAAKC,WAAaoB,GAAMrB,KAAKC,WAAaqB,GAAMtB,KAAKC,WAG1FsB,OAAOC,QAAQzB,UAAYA","file":"game/gameState.js","sourcesContent":["'use strict';\n\nvar gameState = function gameState() {\n  this.boardSize = 0;\n  this.filledCells = 0;\n  this.totalCells = 0;\n  this.board = [];\n};\n\ngameState.prototype.setupBoard = function (boardSize) {\n  if (typeof boardSize === 'number') {\n    this.boardSize = boardSize;\n    this.totalCells = Math.pow(this.boardSize, 2);\n    for (var i = 0; i < this.boardSize; i++) {\n      this.board[i] = [];\n\n      for (var j = 0; j < this.boardSize; j++) {\n        this.board[i][j] = null;\n      }\n    }\n  } else {\n    throw new Error(\"Not a valid board size\");\n  }\n};\n\ngameState.prototype.isValidMove = function (row, col) {\n  if (typeof this.board[row] === 'undefined') {\n    return false;\n  } else if (typeof this.board[row][col] === 'undefined') {\n    return false;\n  } else if (this.board[row][col] !== null) {\n    return false;\n  } else {\n    return true;\n  }\n};\n\ngameState.prototype.setMove = function (row, col, value) {\n  if (this.isValidMove(row, col)) {\n    this.board[row][col] = value;\n    this.filledCells++;\n    this.chkTie();\n  }\n};\n\ngameState.prototype.chkTie = function () {\n  if (this.filledCells === this.totalCells) {\n    return true;\n  }\n};\n\ngameState.prototype.chkWin = function (row, col, value) {\n  var h = 0;\n  var v = 0;\n  var dl = 0;\n  var dr = 0;\n\n  for (var i = 0; i < this.boardSize; i++) {\n\n    //check vertical positions in arrays\n    if (this.board[i][col] === value) v++;\n\n    //check horizonatal positions in arrays\n    if (this.board[row][i] === value) h++;\n\n    //check leftwards diagonal position in arrays\n    if (this.board[i][this.boardSize - 1 - i] === value) dl++;\n\n    //check rightwards diagonal position in arrays\n    if (this.board[i][i] === value) dr++;\n  }\n\n  return h == this.boardSize || v == this.boardSize || dl == this.boardSize || dr == this.boardSize;\n};\n\nmodule.exports.gameState = gameState;"],"sourceRoot":"/source/"}