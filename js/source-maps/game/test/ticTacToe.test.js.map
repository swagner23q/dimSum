{"version":3,"sources":["game/test/ticTacToe.test.js"],"names":["expect","require","ticTacToe","gameState","game","describe","beforeEach","boardSize","setupBoard","it","board","to","be","a","filledCells","equal","totalCells","Error","isValidMove","setMove"],"mappings":"AAAA,YAEA,IAAIA,QAASC,QAAQ,QAAQD,OACzBE,UAAYD,QAAQ,mBACpBE,UAAYD,UAAUC,UACtBC,IAEJC,UAAS,YAAa,WACpBA,SAAS,aAAc,WACrBC,WAAW,WACT,GAAIC,GAAY,CAChBH,MAAO,GAAID,WACXC,KAAKI,WAAWD,KAGlBE,GAAG,6BAA8B,WAC/BT,OAAOI,KAAKM,OAAOC,GAAGC,GAAGC,EAAE,WAG7BJ,GAAG,oCAAqC,WACtCT,OAAOI,KAAKU,aAAaH,GAAGI,MAAM,KAGpCN,GAAG,2BAA4B,WAC7BT,OAAOI,KAAKG,WAAWI,GAAGI,MAAM,KAGlCN,GAAG,4CAA6C,WAC9CT,OAAOI,KAAKY,YAAYL,GAAGI,MAAM,KAGnCN,GAAG,wCAAyC,WAC1CT,OAAO,WACLI,KAAKI,WAAW,OACfG,GAFHX,SAEYiB,WAIhBZ,SAAS,cAAe,WACtBC,WAAW,WACTF,KAAO,GAAID,WACXC,KAAKI,WAAW,KAElBC,GAAG,wCAAyC,WAC1CT,OAAOI,KAAKc,YAAY,EAAG,IAAIP,GAAGC,GAAlCZ,WAEFS,GAAG,2CAA4C,WAC7CT,OAAOI,KAAKc,YAAY,EAAG,IAAIP,GAAGC,GAAlCZ,WAEFS,GAAG,mDAAoD,WACrDT,OAAOI,KAAKc,YAAY,EAAG,IAAIP,GAAGC,GAAlCZ,WAEFS,GAAG,yBAA0B,WAC3BT,OAAOI,KAAKc,YAAY,EAAG,IAAIP,GAAGC,GAAlCZ,YAGJK,SAAS,UAAW,WAClBC,WAAW,WACTF,KAAO,GAAID,WACXC,KAAKI,WAAW,GAChBJ,KAAKe,QAAQ,EAAG,EAAG,OAErBV,GAAG,yCAA0C,WAC3CT,OAAOI,KAAKM,MAAM,GAAG,IAAIC,GAAGI,MAAM,OAEpCN,GAAG,oCAAqC,WACtCT,OAAOI,KAAKU,aAAaH,GAAGI,MAAM,OAGtCV,SAAS,SAAU,WACjBC,WAAW,WACTF,KAAO,GAAID,WACXC,KAAKI,WAAW,GAChBJ,KAAKe,QAAQ,EAAG,EAAG,KACnBf,KAAKe,QAAQ,EAAG,EAAG,KACnBf,KAAKe,QAAQ,EAAG,EAAG,KACnBf,KAAKe,QAAQ,EAAG,EAAG,KACnBf,KAAKe,QAAQ,EAAG,EAAG,KACnBf,KAAKe,QAAQ,EAAG,EAAG,KACnBf,KAAKe,QAAQ,EAAG,EAAG,KACnBf,KAAKe,QAAQ,EAAG,EAAG,KACnBf,KAAKe,QAAQ,EAAG,EAAG,OAErBV,GAAG,qDAAsD,WACvDT,OAAOI,KAAKU,aAAaH,GAAGI,MAAMX,KAAKY","file":"game/test/ticTacToe.test.js","sourcesContent":["'use strict';\n\nvar expect = require('chai').expect;\nvar ticTacToe = require('../ticTacToe.js');\nvar gameState = ticTacToe.gameState;\nvar game;\n\ndescribe('ticTacToe', function () {\n  describe('setupBoard', function () {\n    beforeEach(function () {\n      var boardSize = 3;\n      game = new gameState();\n      game.setupBoard(boardSize);\n    });\n\n    it('the board will be an array', function () {\n      expect(game.board).to.be.a('array');\n    });\n\n    it('the current filledCells will be 0', function () {\n      expect(game.filledCells).to.equal(0);\n    });\n\n    it('the board size will be 3', function () {\n      expect(game.boardSize).to.equal(3);\n    });\n\n    it('the totalCells within the board will be 9', function () {\n      expect(game.totalCells).to.equal(9);\n    });\n\n    it('non numbers not valid for board setup', function () {\n      expect(function () {\n        game.setupBoard('q');\n      }).to.throw(Error);\n    });\n  });\n\n  describe('isValidMove', function () {\n    beforeEach(function () {\n      game = new gameState();\n      game.setupBoard(3);\n    });\n    it('the move will not be valid in the row', function () {\n      expect(game.isValidMove(7, 1)).to.be.false;\n    });\n    it('the move will not be valid in the column', function () {\n      expect(game.isValidMove(1, 7)).to.be.false;\n    });\n    it('the move will not be valid in the row and column', function () {\n      expect(game.isValidMove(7, 7)).to.be.false;\n    });\n    it('the move will be valid', function () {\n      expect(game.isValidMove(1, 0)).to.be.true;\n    });\n  });\n  describe('setMove', function () {\n    beforeEach(function () {\n      game = new gameState();\n      game.setupBoard(3);\n      game.setMove(0, 0, 'X');\n    });\n    it('will set given row and column to value', function () {\n      expect(game.board[0][0]).to.equal('X');\n    });\n    it('will add one to filledCells count', function () {\n      expect(game.filledCells).to.equal(1);\n    });\n  });\n  describe('chkTie', function () {\n    beforeEach(function () {\n      game = new gameState();\n      game.setupBoard(3);\n      game.setMove(0, 0, 'X');\n      game.setMove(0, 1, 'X');\n      game.setMove(0, 2, 'X');\n      game.setMove(1, 0, 'X');\n      game.setMove(1, 1, 'X');\n      game.setMove(1, 2, 'X');\n      game.setMove(2, 0, 'X');\n      game.setMove(2, 1, 'X');\n      game.setMove(2, 2, 'X');\n    });\n    it('will return true if filled cells match total cells', function () {\n      expect(game.filledCells).to.equal(game.totalCells);\n    });\n  });\n  // describe('chkWin', function() {\n  //   beforeEach(function() {\n  //     game = new gameState();\n  //     game.setupBoard(3);\n  //     game.setMove(0,0,'X');\n  //     game.setMove(0,1,'X');\n  //     game.setMove(0,2,'X');\n  //     game.chkWin(0,0,'X');\n  //   });\n  //   it('will count number of values within horizontal positions of array', function() {\n  //     expect(game.filledCells).to.equal(game.totalCells);\n  //   });\n  // });\n});"],"sourceRoot":"/source/"}